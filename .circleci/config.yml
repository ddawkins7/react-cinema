orbs:
  slack: circleci/slack@4.3.1
  cypress: cypress-io/cypress@1
version: 2.1
executors:
  app-executor:
    docker:
      - image: circleci/node:15.5.0
    working_directory: ~/repo
  cypress-executor:
    docker:
      - image: cypress/base:10
  slack-executor:
    docker:
      - image: "cibuilds/base:latest"
    resource_class: small
  docker-publisher:
    environment:
      IMAGE_NAME: ddawkins7/cinema_image
    docker:
      - image: circleci/buildpack-deps:stretch
  terraform-executor:
    docker:
      - image: hashicorp/terraform:0.14.8

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependencies
      command: |
        mkdir -p artifacts
        npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
        - ~/.npm
        - ~/.cache
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build successful"

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy Infrastructure Folder
          command: |
            cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check

  unit-test:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run unit unit
          command: npm run test
      - store_test_results:
          path: tests-results

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Validate & Format
          command: |
            cd infrastructure/
            terraform init -backend=false
            terraform validate
            terraform fmt -check

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/infrastructure/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output react_movies_bucket_name > ../movies_bucket_name.txt
            terraform output cloudfront_distribution_id > ../cloudfront_distribution_id.txt
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  cypress:
    executor: cypress-executor
    steps:
      - checkout
      - *restore-cache
      - run:
          name: Install dependencies
          command: npm ci
      - run: npm run cy:verify
      - *save-cache
      - run:
          command: npm start
          background: true
      - run: npm run e2e:record
      - store_artifacts:
          path: cypress\screenshots
      - store_artifacts:
          path: cypress\videos

  publish-to-docker-hub:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - *restore-cache
      - run: docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"
      - run: docker build -t ${IMAGE_NAME}:latest .
      - run:
          name: Tag and push to docker hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:stable-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:stable-${CIRCLE_BUILD_NUM}
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM}
            else
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM}
            fi

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/movies_bucket_name.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_distribution_id.txt | sed 's/\"//g')
            echo $CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            fi

  notify-via-slack:
    executor: slack-executor
    steps:
      - run: echo "Slack Notification"
      - slack/notify:
          event: "always"
          channel: "cinema-app"
          template: "success_tagged_deploy_1"
          # custom: |
          #   {
          #     "blocks": [
          #       {
          #         "type": "header",
          #         "text" : {
          #           "type": "plain text",
          #           "text": "${CIRCLE_BRANCH} branch deployment to aws S3 and cloundfront is complete. üëç ",
          #           "emoji": true
          #         }
          #       },
          #       {
          #         "type": "section"
          #         "fields": [
          #           "text" : {
          #             "type": "mrkdown",
          #             "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
          #           },
          #           "text" : {
          #             "type": "mrkdown",
          #             "text": "*Branch*:\n$CIRCLE_BRANCH"
          #           },
          #           "text" : {
          #             "type": "mrkdown",
          #             "text": "*When*:\n$(date +'%m/%d/%Y %T')"
          #           },
          #           "text" : {
          #             "type": "mrkdown",
          #             "text": "*Build*:\n$CIRCLE_BUILD_NUM"
          #           },
          #           "text" : {
          #             "type": "mrkdown",
          #             "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
          #           }
          #         ]
          #       },
          #       "type" : "actions",
          #       "elements" : [
          #         {
          #           "type": "button",
          #           "text": {
          #             "type" : "plain_text",
          #             "text" : "View Job"
          #           }
          #           "url" : "${CIRCLE_BUILD_URL}"
          #         }
          #       ]
          #     ]
          #   }

  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Destroy
          command: |
            cd infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform destroy --auto-approve

workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - unit-test:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - cypress:
          requires:
            - linting
            - prettier
            - unit-test
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-validate:
          requires:
            - unit-test
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - publish-to-docker-hub:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-s3:
          requires:
            - publish-to-docker-hub
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - notify-via-slack:
          requires:
            - deploy-to-aws-cloudfront
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - hold:
          type: approval
          requires:
            - deploy-to-aws-cloudfront
      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only:
                - develop
                - staging
                - master
